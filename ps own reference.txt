#######################################
#	1. optimise code              #
#	2. increase Vf to 0.6 ~ 0.7   #
#	3. build sth                  #
#######################################


#########################
#	TO DO LOG	#
#########################
02/12021 :

 1. FORMAT THE CODE, ALL FUNCTIONS ON TOP, REST OF THE CODE ALL BELOW & CLEAN!!!
 2. CHECK WHICH PART OF THE FUNCTION IS THE ONE TAKING THE MOST TIME
 3. TEACH GITHUB?
 

 
#########################
#          LOG      	#
#########################
06122022:

1. randomise the probability to select the area to put the circle
2. random generate the x and y value of the location of the circle
3. send coordinates to check for intersection. If never intersect, put in centlist


# create a matrix that has all possible variations
# when things starts slowing down, take a value from the available ones
# select the probability from the available range
# find nearest neighbour, if nearest neighbour not near enough means got space to put in new circle

# need to add a condition when check is True
# should stay in that section until it finds a new location

07012022:
# tried  to use recursion but too many times repeatitions
# record x and y coordiantes, check  the list, if its inside then skip it
# use math.isclose(value, ref value, abs_tol = radius)

08012011:

# for i in existing centlist, if the radius from centre can take 1 more circle, slot the circle in

10012022:

# done up fill circle function